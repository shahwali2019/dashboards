{"version":3,"file":"editable-table.service.js","sourceRoot":"","sources":["../../src/app/editable-table/editable-table.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { TableRow } from '../util/table-row';\r\nimport { TableCell } from '../util/table-cell';\r\n\r\n\r\nexport class EditableTableService {\r\n\r\n  tableHeadersObjects: TableCell[] = [];\r\n  tableRowsObjects: TableRow[] = [];\r\n  dataType = [];\r\n\r\n  isEditing: TableRow[] = [];\r\n  constructor() { }\r\n\r\n  createTable(headers, content, dataType) {\r\n\r\n    this.createHeaders(headers, dataType);\r\n\r\n    let tableCells: TableCell[] = [];\r\n\r\n    if (content.length > 0) {\r\n      for (const row of content) {\r\n        for (const cell of row) {\r\n          tableCells.push(\r\n            new TableCell(cell),\r\n          );\r\n        }\r\n        this.tableRowsObjects.push(new TableRow(tableCells));\r\n        tableCells = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  createTableWithIds(headers, content, dataType) {\r\n\r\n    this.createHeaders(headers, dataType);\r\n\r\n    let tableCells: TableCell[] = [];\r\n\r\n    if (content.length > 0) {\r\n      for (const row of content) {\r\n        for (let i = 1; i < row.length; i++) {\r\n          tableCells.push(\r\n            new TableCell(row[i]),\r\n          );\r\n        }\r\n        this.tableRowsObjects.push(new TableRow(tableCells, row[0]));\r\n        tableCells = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  addRow() {\r\n    const newCells: TableCell[] = [];\r\n    let newRow: TableRow;\r\n    for (let i = 0; i < this.tableHeadersObjects.length; i++) {\r\n      switch (this.dataType[i]) {\r\n        case 'boolean':\r\n          newCells.push(new TableCell(false));\r\n          break;\r\n        default:\r\n          newCells.push(new TableCell(''));\r\n      }\r\n    }\r\n\r\n    this.tableRowsObjects.push(\r\n      newRow = new TableRow(newCells)\r\n    );\r\n\r\n    this.isEditing.push(newRow);\r\n  }\r\n\r\n  editRow(selectedRow: TableRow) {\r\n    this.isEditing.push(selectedRow);\r\n  }\r\n\r\n  saveRow(selectedRow: TableRow) {\r\n    this.isEditing = this.isEditing.filter(temporalRow => temporalRow !== selectedRow);\r\n  }\r\n\r\n  cancelEdition(selectedRow: TableRow) {\r\n    this.isEditing = this.isEditing.filter(temporalRow => temporalRow !== selectedRow);\r\n    this.tableRowsObjects = this.tableRowsObjects.filter(temporalRow => temporalRow !== selectedRow);\r\n  }\r\n\r\n  deleteRow(selectedRow: TableRow) {\r\n    this.isEditing = this.isEditing.filter(temporalRow => temporalRow !== selectedRow);\r\n    this.tableRowsObjects = this.tableRowsObjects.filter(temporalRow => temporalRow !== selectedRow);\r\n  }\r\n\r\n  checkTypeOf(value: any): string {\r\n    if (typeof (value) === 'boolean') {\r\n      return 'boolean';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private createHeaders(headers, dataType) {\r\n    for (const obj of headers) {\r\n      this.tableHeadersObjects.push(\r\n        new TableCell(obj)\r\n      );\r\n\r\n      this.dataType = dataType;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}