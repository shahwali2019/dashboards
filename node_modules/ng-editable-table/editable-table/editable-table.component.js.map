{"version":3,"file":"editable-table.component.js","sourceRoot":"","sources":["../../src/app/editable-table/editable-table.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\nimport { TableRow } from '../util/table-row';\r\nimport { TableCell } from '../util/table-cell';\r\n\r\nimport { EditableTableService } from './editable-table.service';\r\n\r\n\r\n\r\nexport class EditableTableComponent implements OnInit {\r\n\r\n   tableHeaders: string[] = [];\r\n   tableRows: any[][] = [];\r\n   tableRowsWithId: any[][] = [];\r\n   canDeleteRows = true;\r\n   canEditRows = true;\r\n   canAddRows = true;\r\n\r\n   addButtonLabel: string;\r\n   editButtonLabel: string;\r\n   saveButtonLabel: string;\r\n   cancelButtonLabel: string;\r\n   deleteButtonLabel: string;\r\n\r\n   addIcon = 'fa fa-plus';\r\n   editIcon = 'fa fa-pencil-square-o';\r\n   saveIcon = 'fa fa-check';\r\n   deleteIcon = 'fa fa-times';\r\n\r\n   addButtonClass: string;\r\n   editButtonClass: string;\r\n   deleteButtonClass: string;\r\n\r\n   trClass: string;\r\n   tdClass: string;\r\n   buttonsTdClass: string;\r\n   class: string;\r\n   dataType = [];\r\n\r\n   errorClass = 'myerror';\r\n   isRequired = true;\r\n   requiredMessage = 'Campo Requerido';\r\n\r\n\r\n   onSave = new EventEmitter<any>();\r\n   onRemove = new EventEmitter<any>();\r\n\r\n  service: EditableTableService;\r\n\r\n  constructor(service: EditableTableService) {\r\n    this.service = service;\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this.tableRows.length > 0 || (this.tableRows !== undefined && this.tableRowsWithId.length === 0)) {\r\n      this.service.createTable(this.tableHeaders, this.tableRows, this.dataType);\r\n    } else if (this.tableRowsWithId.length > 0 || (this.tableRowsWithId !== undefined && this.tableRows.length === 0)) {\r\n      this.service.createTableWithIds(this.tableHeaders, this.tableRowsWithId, this.dataType);\r\n    }\r\n  }\r\n\r\n  addRow() {\r\n    this.service.addRow();\r\n  }\r\n\r\n  editRow(selectedRow: TableRow) {\r\n    this.service.editRow(selectedRow);\r\n  }\r\n\r\n  cancelEdition(selectedRow: TableRow) {\r\n    this.service.cancelEdition(selectedRow);\r\n  }\r\n\r\n  saveRow(selectedRow: TableRow) {\r\n    for (const cell of selectedRow.cells) {\r\n      if (cell.content == null || cell.content === '') {\r\n        return;\r\n      }\r\n    }\r\n    this.service.saveRow(selectedRow);\r\n    const dir = [];\r\n\r\n    for (let i = 0; i < selectedRow.cells.length; i++) {\r\n      dir.push(selectedRow.cells[i].content);\r\n    }\r\n    const obj = { id: selectedRow.id, cells: dir };\r\n\r\n    this.onSave.emit(obj);\r\n  }\r\n\r\n  deleteRow(selectedRow: TableRow) {\r\n    this.service.deleteRow(selectedRow);\r\n    const dir = [];\r\n\r\n    for (let i = 0; i < selectedRow.cells.length; i++) {\r\n      dir.push(selectedRow.cells[i].content);\r\n    }\r\n    const obj = { id: selectedRow.id, cells: dir };\r\n\r\n    this.onRemove.emit(obj);\r\n  }\r\n\r\n  checkTypeOf(value: any): string {\r\n    if (typeof (value) === 'boolean') {\r\n      return 'boolean';\r\n    }\r\n    return '';\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'nv-editable-table',\r\n  template: `\r\n          <table class=\"{{class}}\">\r\n              <thead>\r\n                <tr>\r\n                  <th *ngFor=\"let title of service.tableHeadersObjects\">{{title.content}}</th>\r\n                  <th *ngIf=\"canEditRows||canDeleteRows\"></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr class=\"{{trClass}}\" *ngFor=\"let row of service.tableRowsObjects\">\r\n                  <td class=\"{{tdClass}}\" *ngFor=\"let cell of row.cells\">\r\n                    <span *ngIf=\"service.isEditing.indexOf(row) === -1 && checkTypeOf(cell.content) !== 'boolean'\">{{cell.content}}</span>\r\n                    <span *ngIf=\"service.isEditing.indexOf(row) === -1 && checkTypeOf(cell.content) == 'boolean'\">\r\n                      {{cell.content ? 'Activo' : 'Inactivo'}}\r\n                    </span>\r\n                    <div class=\"ui input\" *ngIf=\"!(service.isEditing.indexOf(row) == -1) && checkTypeOf(cell.content) !== 'boolean' \r\n                     && !isRequired\">\r\n                      <input type=\"text\" [(ngModel)]=\"cell.content\" [name]=\"cell.content\">\r\n                    </div>\r\n                    <div class=\"ui input requiredInput\" [ngClass]=\"{errorClass: !cell.content && cell.touched}\" *ngIf=\"!(service.isEditing.indexOf(row) == -1) && checkTypeOf(cell.content) !== 'boolean' && isRequired\">\r\n                      <input type=\"text\" [(ngModel)]=\"cell.content\" [name]=\"cell.content\" #[cell.content]=\"ngModel\" required />\r\n                        <div [ngClass]=\"{'show': !cell.content && cell.touched, \r\n                                  'hide': cell.content}\" class=\"divmessage\" style=\"Color: red;\" [hidden]=\"cell.content\">\r\n                              <div>{{requiredMessage}}</div>\r\n                          </div>\r\n                        </div>\r\n        <div *ngIf=\"!(service.isEditing.indexOf(row) == -1) && checkTypeOf(cell.content) === 'boolean'\" class=\"field checkboxContainer\">\r\n            <div class=\"ui toggle checkbox\">\r\n                <input type=\"checkbox\" name=\"public\" [(ngModel)]=\"cell.content\" name=\"active\">\r\n                <label>{{cell.content ? 'Activo' : 'Inactivo'}}</label>\r\n            </div>\r\n        </div>\r\n                  </td>\r\n                  <td class={{buttonsTdClass}} *ngIf=\"canEditRows||canDeleteRows\">\r\n                    <button class={{editButtonClass}} *ngIf=\"service.isEditing.indexOf(row) === -1 && canEditRows\" (click)=\"editRow(row)\">\r\n                      <i class=\"{{editIcon}}\"></i>{{editButtonLabel}}\r\n                    </button>\r\n                    <button class={{editButtonClass}} *ngIf=\"!(service.isEditing.indexOf(row) == -1) && canEditRows\" \r\n                      (click)=\"saveRow(row)\">\r\n                      <i class=\"{{saveIcon}}\"></i>{{saveButtonLabel}}\r\n                    </button>\r\n                    <button class={{deleteButtonClass}} *ngIf=\"canDeleteRows && service.isEditing.indexOf(row) === -1\" \r\n                    (click)=\"deleteRow(row)\">\r\n                      <i class=\"{{deleteIcon}}\"></i>{{deleteButtonLabel}}\r\n                    </button>\r\n                    <button class={{deleteButtonClass}} *ngIf=\"!(service.isEditing.indexOf(row) == -1) && canEditRows\"\r\n                     (click)=\"deleteRow(row)\">\r\n                      <i class=\"{{deleteIcon}}\"></i>{{cancelButtonLabel}}\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n              <tfoot>\r\n                <tr>\r\n                  <th *ngFor=\"let title of service.tableHeadersObjects\"></th>\r\n                  <th *ngIf=\"canEditRows||canDeleteRows\">\r\n                      <button class={{addButtonClass}} (click)=\"addRow()\" *ngIf=\"canAddRows\">\r\n                          <i class=\"{{addIcon}}\"></i>{{addButtonLabel}}\r\n                      </button>\r\n                  </th>\r\n                </tr>\r\n              </tfoot>\r\n            </table>\r\n  `,\r\n  styles: [`tfoot{text-align: right;} \r\n  .myerror{color:red} \r\n  .requiredInput.divmessage{display:none} \r\n  .requiredInput.divmessage.show{display:block !important} \r\n  .requiredInput.divmessage.hide{display:none}`],\r\n  providers: [EditableTableService]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: EditableTableService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'tableHeaders': [{ type: Input, args: ['table-headers', ] },],\n'tableRows': [{ type: Input, args: ['table-rows', ] },],\n'tableRowsWithId': [{ type: Input, args: ['table-rows-with-id', ] },],\n'canDeleteRows': [{ type: Input, args: ['can-delete-rows', ] },],\n'canEditRows': [{ type: Input, args: ['can-edit-rows', ] },],\n'canAddRows': [{ type: Input, args: ['can-add-rows', ] },],\n'addButtonLabel': [{ type: Input, args: ['add-button-label', ] },],\n'editButtonLabel': [{ type: Input, args: ['edit-button-label', ] },],\n'saveButtonLabel': [{ type: Input, args: ['save-button-label', ] },],\n'cancelButtonLabel': [{ type: Input, args: ['cancel-button-label', ] },],\n'deleteButtonLabel': [{ type: Input, args: ['delete-button-label', ] },],\n'addIcon': [{ type: Input, args: ['add-icon', ] },],\n'editIcon': [{ type: Input, args: ['edit-icon', ] },],\n'saveIcon': [{ type: Input, args: ['save-icon', ] },],\n'deleteIcon': [{ type: Input, args: ['delete-icon', ] },],\n'addButtonClass': [{ type: Input, args: ['add-button-class', ] },],\n'editButtonClass': [{ type: Input, args: ['edit-button-class', ] },],\n'deleteButtonClass': [{ type: Input, args: ['delete-button-class', ] },],\n'trClass': [{ type: Input, args: ['tr-class', ] },],\n'tdClass': [{ type: Input, args: ['td-class', ] },],\n'buttonsTdClass': [{ type: Input, args: ['buttons-td-class', ] },],\n'class': [{ type: Input, args: ['class', ] },],\n'dataType': [{ type: Input, args: ['data-type', ] },],\n'errorClass': [{ type: Input },],\n'isRequired': [{ type: Input },],\n'requiredMessage': [{ type: Input },],\n'onSave': [{ type: Output },],\n'onRemove': [{ type: Output },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}