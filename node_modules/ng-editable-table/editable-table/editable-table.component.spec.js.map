{"version":3,"file":"editable-table.component.spec.js","sourceRoot":"","sources":["../../src/app/editable-table/editable-table.component.spec.ts"],"names":[],"mappings":"OACO,EAAE,KAAK,EAAoB,OAAO,EAAE,0BAA0B,EAAE,MAAM,uBAAuB;OAC7F,EAAE,EAAE,EAAE,MAAM,2BAA2B;OAGvC,EAAE,WAAW,EAAE,mBAAmB,EAAE,MAAM,gBAAgB;OAI1D,EAAE,sBAAsB,EAAE,MAAM,4BAA4B;AAEnE,QAAQ,CAAC,wBAAwB,EAAE;IACjC,IAAI,SAAiC,CAAC;IACtC,IAAI,OAAiD,CAAC;IACtD,IAAI,iBAA+B,CAAC;IACpC,IAAI,wBAAsC,CAAC;IAC3C,IAAI,KAAkB,CAAC;IAEvB,UAAU,CAAC,KAAK,CAAC;QACf,OAAO,CAAC,sBAAsB,CAAC;YAC7B,YAAY,EAAE,CAAC,sBAAsB,CAAC;YACtC,OAAO,EAAE,CAAC,mBAAmB,EAAE,WAAW,CAAC;YAC3C,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,0BAA0B,EAAE,QAAQ,EAAE,IAAI,EAAE;aACxD;SACF,CAAC;aACC,iBAAiB,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC,CAAC;IAEJ,UAAU,CAAC;QACT,OAAO,GAAG,OAAO,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;QAC1D,SAAS,GAAG,OAAO,CAAC,iBAAiB,CAAC;QACtC,OAAO,CAAC,aAAa,EAAE,CAAC;QAExB,iBAAiB,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;QAChE,wBAAwB,GAAG,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxE,KAAK,GAAG,iBAAiB,CAAC,aAAa,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyGM;AAEP,CAAC,CAAC,CAAC","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport { async, ComponentFixture, TestBed, ComponentFixtureAutoDetect } from '@angular/core/testing';\r\nimport { By } from '@angular/platform-browser';\r\nimport { DebugElement, Input } from '@angular/core';\r\n\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { TableRow } from '../util/table-row';\r\nimport { TableCell } from '../util/table-cell';\r\nimport { EditableTableComponent } from './editable-table.component';\r\n\r\ndescribe('EditableTableComponent', () => {\r\n  let component: EditableTableComponent;\r\n  let fixture: ComponentFixture<EditableTableComponent>;\r\n  let tableDebugElement: DebugElement;\r\n  let addRowButtonDebugElement: DebugElement;\r\n  let table: HTMLElement;\r\n\r\n  beforeEach(async(() => {\r\n    TestBed.configureTestingModule({\r\n      declarations: [EditableTableComponent],\r\n      imports: [ReactiveFormsModule, FormsModule],\r\n      providers: [\r\n        { provide: ComponentFixtureAutoDetect, useValue: true }\r\n      ]\r\n    })\r\n      .compileComponents();\r\n  }));\r\n\r\n  beforeEach(() => {\r\n    fixture = TestBed.createComponent(EditableTableComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n\r\n    tableDebugElement = fixture.debugElement.query(By.css('table'));\r\n    addRowButtonDebugElement = fixture.debugElement.query(By.css('button'));\r\n    table = tableDebugElement.nativeElement;\r\n  });\r\n\r\n /* it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should have table headers strings', () => {\r\n    const tableHeaders = ['Header 1', 'Header 2', 'Header 3'];\r\n\r\n    component.tableHeaders = tableHeaders;\r\n\r\n    expect(component.tableHeaders).toBe(tableHeaders);\r\n  });\r\n\r\n  it('should have table rows strings', () => {\r\n    const tableRows = [\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell']\r\n    ];\r\n\r\n    component.tableRows = tableRows;\r\n\r\n    expect(component.tableRows).toBe(tableRows);\r\n  });\r\n\r\n  it('should create a table with thead and thbody', () => {\r\n    expect(table.hasChildNodes).toBeTruthy();\r\n  });\r\n\r\n  it('function addRow() should add a new row', () => {\r\n    component.addRow();\r\n    expect(component.tableRowsObjects.length).toBe(1);\r\n  });\r\n\r\n  it('function addRow() should add a new row and enable editing', () => {\r\n    component.addRow();\r\n    expect(component.isEditing.length).toBe(1);\r\n  });\r\n\r\n  it('function editRow() should add to isEditing array the first row', () => {\r\n    const tableRows = [\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell']\r\n    ];\r\n\r\n    const tableHeaders = ['Header 1', 'Header 2', 'Header 3'];\r\n\r\n    component.tableHeaders = tableHeaders;\r\n\r\n    component.tableRows = tableRows;\r\n    component.editRow(component.tableRowsObjects[0]);\r\n    expect(component.isEditing.length).toBe(1);\r\n    expect(component.isEditing[0]).toBe(component.tableRowsObjects[0]);\r\n  });\r\n\r\n  it('function deleteRow() should remove of isEditing array and rows array the first row', () => {\r\n    const tableRows = [\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell']\r\n    ];\r\n\r\n    const tableHeaders = ['Header 1', 'Header 2', 'Header 3'];\r\n\r\n    component.tableHeaders = tableHeaders;\r\n\r\n    component.tableRows = tableRows;\r\n\r\n    const temporalItem = component.tableRowsObjects[0];\r\n    component.deleteRow(temporalItem);\r\n    expect(component.isEditing.length).toBe(0);\r\n    expect(component.tableRowsObjects.indexOf(temporalItem)).toBe(-1);\r\n  });\r\n\r\n  it('function cancelEditing() should finish the row edition', () => {\r\n    const tableRows = [\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell'],\r\n      ['Cell', 'Cell', 'Cell']\r\n    ];\r\n\r\n    const tableHeaders = ['Header 1', 'Header 2', 'Header 3'];\r\n\r\n    component.tableHeaders = tableHeaders;\r\n\r\n    component.tableRows = tableRows;\r\n\r\n    const temporalItem = component.tableRowsObjects[0];\r\n\r\n    component.isEditing.push(temporalItem);\r\n\r\n    component.cancelEditing(temporalItem);\r\n    expect(component.isEditing.length).toBe(0);\r\n  });\r\n\r\n  it('should accept any kind of models', () => {\r\n    const tableRows = [\r\n      [1, 'Cell', 'Cell'],\r\n      ['Cell', 2, 'Cell'],\r\n      ['Cell', 'Cell', 3]\r\n    ];\r\n\r\n    component.tableRows = tableRows;\r\n\r\n    expect(component.tableRows).toBe(tableRows);\r\n  });*/\r\n\r\n});\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}