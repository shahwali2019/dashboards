import { ANALYZE_FOR_ENTRY_COMPONENTS, Component, Inject, Injectable, InjectionToken, NgModule } from '@angular/core';
import { Router, RouterModule } from '@angular/router';
import 'rxjs/Observable';
import 'rxjs/Subject';
import 'rxjs/Subscriber';
import 'rxjs/Observer';
import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { animate, state, style, transition, trigger } from '@angular/animations';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DataResolver {
    constructor() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        this.value = value;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    resolve(route) {
        return this.value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Result {
    /**
     * @param {?} name
     */
    constructor(name) {
        this.name = name;
    }
    /**
     * @param {?=} ok
     * @param {?=} cancel
     * @return {?}
     */
    subscribe(ok, cancel) {
        this.ok = ok;
        this.cancel = cancel;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    nextOk(value) {
        if (this.ok)
            this.ok(value);
    }
    /**
     * @return {?}
     */
    nextCancel() {
        if (this.cancel)
            this.cancel();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ModalService {
    /**
     * @param {?} router
     * @param {?} resolver
     */
    constructor(router$$1, resolver) {
        this.router = router$$1;
        this.resolver = resolver;
        this.results = [];
    }
    /**
     * @return {?}
     */
    getValue() {
        if (this.router.routerState
            && this.router.routerState.snapshot
            && this.router.routerState.snapshot.root) {
            var /** @type {?} */ snapshot = this.router.routerState.snapshot.root.children.filter(t => t.outlet == 'modal')[0];
            return snapshot.data["value"];
        }
        return undefined;
    }
    /**
     * @template T
     * @param {?} name
     * @param {?=} data
     * @return {?}
     */
    open(name, data) {
        this.resolver.setValue(data);
        this.router.navigate([{ outlets: { modal: [name] } }], { skipLocationChange: true });
        var /** @type {?} */ result = new Result(name);
        this.results.push(result);
        return result;
    }
    /**
     * @return {?}
     */
    close() {
        this.router.navigate([{ outlets: { modal: null } }], { skipLocationChange: true });
        this.results.splice(this.results.length - 1, 1);
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    ok(value) {
        this.results[this.results.length - 1].nextOk(value);
        this.close();
    }
    /**
     * @return {?}
     */
    cancel() {
        this.results[this.results.length - 1].nextCancel();
        this.close();
    }
}
ModalService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ModalService.ctorParameters = () => [
    { type: Router, decorators: [{ type: Inject, args: [Router,] },] },
    { type: DataResolver, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const baseAnimation = trigger('baseAnimation', [
    state('void', style({ position: 'fixed', opacity: 0 })),
    // route 'enter' transition
    transition(':enter', [
        // css styles at start of transition
        style({ opacity: 0, "z-index": "1001" }),
        // animation and styles at end of transition
        animate('0.2s', style({ opacity: 1, "z-index": "1001" }))
    ]),
    transition(':leave', [
        // css styles at start of transition
        style({ opacity: 1 }),
        // animation and styles at end of transition
        animate('0.2s', style({ opacity: 0, "z-index": "1001" }))
    ]),
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ModalDialogComponent {
    /**
     * @param {?} modalService
     */
    constructor(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    close() {
        this.modalService.close();
    }
}
ModalDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'modal-dialog',
                template: `
    <div  @baseAnimation>
    <div  class="modal fade in show" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" (click)="close()" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
              <ng-content select="[modal-header]"></ng-content>
            </div>
            <div class="modal-body">
                <ng-content select="[modal-body]"></ng-content>
            </div>
            <div class="modal-footer">
                <div #footer>
                    <ng-content select="[modal-footer]"></ng-content>
                </div>
                <div *ngIf="footer.children.length == 0">
                    <button (click)="close()" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Submit</button>
                </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-backdrop fade in"></div>

    </div>
  `,
                animations: [
                    baseAnimation
                ]
            },] },
];
/** @nocollapse */
ModalDialogComponent.ctorParameters = () => [
    { type: ModalService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ModalOutletComponent {
    constructor() {
    }
}
ModalOutletComponent.decorators = [
    { type: Component, args: [{
                selector: 'modal-outlet',
                template: `
    <router-outlet name="modal"></router-outlet>
  `,
                animations: []
            },] },
];
/** @nocollapse */
ModalOutletComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CommonModalModule {
}
CommonModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    BrowserAnimationsModule,
                    RouterModule.forChild([])
                ],
                declarations: [
                    ModalDialogComponent,
                    ModalOutletComponent
                ],
                exports: [
                    ModalDialogComponent,
                    ModalOutletComponent
                ],
                providers: []
            },] },
];
/** @nocollapse */
CommonModalModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const Modals = new InjectionToken('modals');
/**
 * @param {?} router
 * @param {?} modals
 * @param {?} resolver
 * @return {?}
 */
function InitModalService(router$$1, modals, resolver) {
    var /** @type {?} */ routes = modals.map(t => { return { path: t.name, component: t.component, outlet: 'modal', resolve: { value: DataResolver } }; });
    var /** @type {?} */ r = router$$1.config.concat(routes);
    router$$1.resetConfig(r);
    return new ModalService(router$$1, resolver);
}
class ModalModule {
    /**
     * @param {?} modals
     * @return {?}
     */
    static forRoot(modals) {
        return {
            ngModule: ModalModule,
            providers: [
                { provide: Modals, useValue: modals },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: modals },
                { provide: ModalService, useFactory: InitModalService, deps: [Router, Modals, DataResolver] },
                DataResolver
            ]
        };
    }
}
ModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CommonModalModule,
                    RouterModule.forRoot([])
                ],
                exports: [
                    CommonModalModule
                ],
                providers: []
            },] },
];
/** @nocollapse */
ModalModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RouterModalModule {
    /**
     * @param {?} modals
     * @return {?}
     */
    static forRoot(modals) {
        return {
            ngModule: RouterModalModule,
            providers: [
                { provide: Modals, useValue: modals },
                { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: modals },
                { provide: ModalService, useFactory: InitModalService, deps: [Router, Modals, DataResolver] },
                DataResolver
            ]
        };
    }
}
RouterModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    CommonModalModule
                ],
                exports: [
                    CommonModalModule
                ]
            },] },
];
/** @nocollapse */
RouterModalModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the core package.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { Modals, InitModalService, ModalModule, RouterModalModule, CommonModalModule, ModalService, ModalDialogComponent as ɵa, ModalOutletComponent as ɵd, baseAnimation as ɵb, DataResolver as ɵc };
//# sourceMappingURL=index.es6.js.map
