define(['exports', '@angular/core', '@angular/router', 'rxjs/Observable', 'rxjs/Subject', 'rxjs/Subscriber', 'rxjs/Observer', '@angular/common', '@angular/platform-browser/animations', '@angular/animations'], function (exports, core, router, Observable, Subject, Subscriber, Observer, common, animations, animations$1) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DataResolver = /** @class */ (function () {
    function DataResolver() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DataResolver.prototype.setValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    DataResolver.prototype.resolve = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.value;
    };
    return DataResolver;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Result = /** @class */ (function () {
    function Result(name) {
        this.name = name;
    }
    /**
     * @param {?=} ok
     * @param {?=} cancel
     * @return {?}
     */
    Result.prototype.subscribe = /**
     * @param {?=} ok
     * @param {?=} cancel
     * @return {?}
     */
    function (ok, cancel) {
        this.ok = ok;
        this.cancel = cancel;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Result.prototype.nextOk = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.ok)
            this.ok(value);
    };
    /**
     * @return {?}
     */
    Result.prototype.nextCancel = /**
     * @return {?}
     */
    function () {
        if (this.cancel)
            this.cancel();
    };
    return Result;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ModalService = /** @class */ (function () {
    function ModalService(router$$1, resolver) {
        this.router = router$$1;
        this.resolver = resolver;
        this.results = [];
    }
    /**
     * @return {?}
     */
    ModalService.prototype.getValue = /**
     * @return {?}
     */
    function () {
        if (this.router.routerState
            && this.router.routerState.snapshot
            && this.router.routerState.snapshot.root) {
            var /** @type {?} */ snapshot = this.router.routerState.snapshot.root.children.filter(function (t) { return t.outlet == 'modal'; })[0];
            return snapshot.data["value"];
        }
        return undefined;
    };
    /**
     * @template T
     * @param {?} name
     * @param {?=} data
     * @return {?}
     */
    ModalService.prototype.open = /**
     * @template T
     * @param {?} name
     * @param {?=} data
     * @return {?}
     */
    function (name, data) {
        this.resolver.setValue(data);
        this.router.navigate([{ outlets: { modal: [name] } }], { skipLocationChange: true });
        var /** @type {?} */ result = new Result(name);
        this.results.push(result);
        return result;
    };
    /**
     * @return {?}
     */
    ModalService.prototype.close = /**
     * @return {?}
     */
    function () {
        this.router.navigate([{ outlets: { modal: null } }], { skipLocationChange: true });
        this.results.splice(this.results.length - 1, 1);
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    ModalService.prototype.ok = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        this.results[this.results.length - 1].nextOk(value);
        this.close();
    };
    /**
     * @return {?}
     */
    ModalService.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.results[this.results.length - 1].nextCancel();
        this.close();
    };
    ModalService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ModalService.ctorParameters = function () { return [
        { type: router.Router, decorators: [{ type: core.Inject, args: [router.Router,] },] },
        { type: DataResolver, },
    ]; };
    return ModalService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var baseAnimation = animations$1.trigger('baseAnimation', [
    animations$1.state('void', animations$1.style({ position: 'fixed', opacity: 0 })),
    // route 'enter' transition
    animations$1.transition(':enter', [
        // css styles at start of transition
        animations$1.style({ opacity: 0, "z-index": "1001" }),
        // animation and styles at end of transition
        animations$1.animate('0.2s', animations$1.style({ opacity: 1, "z-index": "1001" }))
    ]),
    animations$1.transition(':leave', [
        // css styles at start of transition
        animations$1.style({ opacity: 1 }),
        // animation and styles at end of transition
        animations$1.animate('0.2s', animations$1.style({ opacity: 0, "z-index": "1001" }))
    ]),
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ModalDialogComponent = /** @class */ (function () {
    function ModalDialogComponent(modalService) {
        this.modalService = modalService;
    }
    /**
     * @return {?}
     */
    ModalDialogComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.modalService.close();
    };
    ModalDialogComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'modal-dialog',
                    template: "\n    <div  @baseAnimation>\n    <div  class=\"modal fade in show\" tabindex=\"-1\" role=\"dialog\">\n        <div class=\"modal-dialog modal-lg\" role=\"document\">\n          <div class=\"modal-content\">\n            <div class=\"modal-header\">\n              <button type=\"button\" (click)=\"close()\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n              <ng-content select=\"[modal-header]\"></ng-content>\n            </div>\n            <div class=\"modal-body\">\n                <ng-content select=\"[modal-body]\"></ng-content>\n            </div>\n            <div class=\"modal-footer\">\n                <div #footer>\n                    <ng-content select=\"[modal-footer]\"></ng-content>\n                </div>\n                <div *ngIf=\"footer.children.length == 0\">\n                    <button (click)=\"close()\" type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n                    <button type=\"button\" class=\"btn btn-primary\">Submit</button>\n                </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-backdrop fade in\"></div>\n\n    </div>\n  ",
                    animations: [
                        baseAnimation
                    ]
                },] },
    ];
    /** @nocollapse */
    ModalDialogComponent.ctorParameters = function () { return [
        { type: ModalService, },
    ]; };
    return ModalDialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ModalOutletComponent = /** @class */ (function () {
    function ModalOutletComponent() {
    }
    ModalOutletComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'modal-outlet',
                    template: "\n    <router-outlet name=\"modal\"></router-outlet>\n  ",
                    animations: []
                },] },
    ];
    /** @nocollapse */
    ModalOutletComponent.ctorParameters = function () { return []; };
    return ModalOutletComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CommonModalModule = /** @class */ (function () {
    function CommonModalModule() {
    }
    CommonModalModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        animations.BrowserAnimationsModule,
                        router.RouterModule.forChild([])
                    ],
                    declarations: [
                        ModalDialogComponent,
                        ModalOutletComponent
                    ],
                    exports: [
                        ModalDialogComponent,
                        ModalOutletComponent
                    ],
                    providers: []
                },] },
    ];
    /** @nocollapse */
    CommonModalModule.ctorParameters = function () { return []; };
    return CommonModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Modals = new core.InjectionToken('modals');
/**
 * @param {?} router
 * @param {?} modals
 * @param {?} resolver
 * @return {?}
 */
function InitModalService(router$$1, modals, resolver) {
    var /** @type {?} */ routes = modals.map(function (t) { return { path: t.name, component: t.component, outlet: 'modal', resolve: { value: DataResolver } }; });
    var /** @type {?} */ r = router$$1.config.concat(routes);
    router$$1.resetConfig(r);
    return new ModalService(router$$1, resolver);
}
var ModalModule = /** @class */ (function () {
    function ModalModule() {
    }
    /**
     * @param {?} modals
     * @return {?}
     */
    ModalModule.forRoot = /**
     * @param {?} modals
     * @return {?}
     */
    function (modals) {
        return {
            ngModule: ModalModule,
            providers: [
                { provide: Modals, useValue: modals },
                { provide: core.ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: modals },
                { provide: ModalService, useFactory: InitModalService, deps: [router.Router, Modals, DataResolver] },
                DataResolver
            ]
        };
    };
    ModalModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        CommonModalModule,
                        router.RouterModule.forRoot([])
                    ],
                    exports: [
                        CommonModalModule
                    ],
                    providers: []
                },] },
    ];
    /** @nocollapse */
    ModalModule.ctorParameters = function () { return []; };
    return ModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RouterModalModule = /** @class */ (function () {
    function RouterModalModule() {
    }
    /**
     * @param {?} modals
     * @return {?}
     */
    RouterModalModule.forRoot = /**
     * @param {?} modals
     * @return {?}
     */
    function (modals) {
        return {
            ngModule: RouterModalModule,
            providers: [
                { provide: Modals, useValue: modals },
                { provide: core.ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: modals },
                { provide: ModalService, useFactory: InitModalService, deps: [router.Router, Modals, DataResolver] },
                DataResolver
            ]
        };
    };
    RouterModalModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        CommonModalModule
                    ],
                    exports: [
                        CommonModalModule
                    ]
                },] },
    ];
    /** @nocollapse */
    RouterModalModule.ctorParameters = function () { return []; };
    return RouterModalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @module
 * @description
 * Entry point for all public APIs of the core package.
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

exports.Modals = Modals;
exports.InitModalService = InitModalService;
exports.ModalModule = ModalModule;
exports.RouterModalModule = RouterModalModule;
exports.CommonModalModule = CommonModalModule;
exports.ModalService = ModalService;
exports.ɵa = ModalDialogComponent;
exports.ɵd = ModalOutletComponent;
exports.ɵb = baseAnimation;
exports.ɵc = DataResolver;

Object.defineProperty(exports, '__esModule', { value: true });

});
//# sourceMappingURL=ng-bootstrap-modal.amd.js.map
