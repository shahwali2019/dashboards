import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
const moment = momentImported;
let CalendarSchedulerEventComponent = class CalendarSchedulerEventComponent {
    constructor() {
        this.showContent = true;
        this.showActions = true;
        this.showStatus = true;
        this.eventClicked = new EventEmitter();
    }
    ngOnInit() {
        this.title = this.title || `${this.event.event.title}, ${moment(this.event.event.start).format('dddd L, LT')}`;
    }
    onMouseEnter() {
        // Maybe do something
    }
    onMouseLeave() {
        // Maybe do something
    }
    /**
     * @hidden
     */
    onEventClick(mouseEvent, event) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (event.isClickable) {
            this.eventClicked.emit({ event: event });
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], CalendarSchedulerEventComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], CalendarSchedulerEventComponent.prototype, "day", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], CalendarSchedulerEventComponent.prototype, "event", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], CalendarSchedulerEventComponent.prototype, "showContent", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], CalendarSchedulerEventComponent.prototype, "showActions", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], CalendarSchedulerEventComponent.prototype, "showStatus", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], CalendarSchedulerEventComponent.prototype, "customTemplate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], CalendarSchedulerEventComponent.prototype, "eventTitleTemplate", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], CalendarSchedulerEventComponent.prototype, "eventClicked", void 0);
CalendarSchedulerEventComponent = tslib_1.__decorate([
    Component({
        selector: 'calendar-scheduler-event',
        template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-event"
                [title]="title"
                [class.cal-disabled]="event.event.isDisabled"
                [class.cal-not-clickable]="!event.event.isClickable"
                [class.cal-draggable]="event.event.draggable"
                [class.cal-starts-before-day]="event.startsBeforeDay"
                [class.cal-ends-after-day]="event.endsAfterDay"
                [style.backgroundColor]="event.event.color?.secondary"
                [style.borderColor]="event.event.color?.primary"
                (mwlClick)="onEventClick($event, event.event)"
                (mouseenter)="onMouseEnter()"
                (mouseleave)="onMouseLeave()">
                <calendar-scheduler-event-title
                    view="week"
                    [event]="event.event"
                    [showStatus]="showStatus"
                    [showContent]="showContent"
                    [showActions]="showActions"
                    [customTemplate]="eventTitleTemplate">
                </calendar-scheduler-event-title>
                <calendar-scheduler-event-content
                    *ngIf="showContent"
                    [event]="event.event">
                </calendar-scheduler-event-content>
                <calendar-scheduler-event-actions
                    *ngIf="showActions && showContent && (event.event.isClickable || event.event.isDisabled)"
                    [event]="event.event">
                </calendar-scheduler-event-actions>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                title: title,
                day: day,
                event: event,
                showContent: showContent,
                showActions: showActions,
                showStatus: showStatus,
                eventTitleTemplate: eventTitleTemplate,
                eventClicked: eventClicked
            }">
        </ng-template>
    `,
        host: {
            '[style.height.%]': '100'
        }
    }),
    tslib_1.__metadata("design:paramtypes", [])
], CalendarSchedulerEventComponent);
export { CalendarSchedulerEventComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItY2FsZW5kYXItc2NoZWR1bGVyLyIsInNvdXJjZXMiOlsibW9kdWxlcy9zY2hlZHVsZXIvY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFPNUYsc0ZBQXNGO0FBQ3RGLE9BQU8sS0FBSyxjQUFjLE1BQU0sUUFBUSxDQUFDO0FBQ3pDLE1BQU0sTUFBTSxHQUFHLGNBQWMsQ0FBQztBQXNEOUIsSUFBYSwrQkFBK0IsR0FBNUMsTUFBYSwrQkFBK0I7SUFtQnhDO1FBWlMsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFFNUIsZ0JBQVcsR0FBWSxJQUFJLENBQUM7UUFFNUIsZUFBVSxHQUFZLElBQUksQ0FBQztRQU0xQixpQkFBWSxHQUFvRCxJQUFJLFlBQVksRUFBcUMsQ0FBQztJQUU5RyxDQUFDO0lBRVosUUFBUTtRQUNYLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7SUFDbkgsQ0FBQztJQUVELFlBQVk7UUFDUixxQkFBcUI7SUFDekIsQ0FBQztJQUVELFlBQVk7UUFDUixxQkFBcUI7SUFDekIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsWUFBWSxDQUFDLFVBQXNCLEVBQUUsS0FBNkI7UUFDOUQsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFO1lBQzVCLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUNoQztRQUNELElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzVDO0lBQ0wsQ0FBQztDQUNKLENBQUE7QUEzQ1k7SUFBUixLQUFLLEVBQUU7OzhEQUFlO0FBRWQ7SUFBUixLQUFLLEVBQUU7OzREQUF1QjtBQUV0QjtJQUFSLEtBQUssRUFBRTs7OERBQTJCO0FBRTFCO0lBQVIsS0FBSyxFQUFFOztvRUFBNkI7QUFFNUI7SUFBUixLQUFLLEVBQUU7O29FQUE2QjtBQUU1QjtJQUFSLEtBQUssRUFBRTs7bUVBQTRCO0FBRTNCO0lBQVIsS0FBSyxFQUFFO3NDQUFpQixXQUFXO3VFQUFNO0FBRWpDO0lBQVIsS0FBSyxFQUFFO3NDQUFxQixXQUFXOzJFQUFNO0FBRXBDO0lBQVQsTUFBTSxFQUFFO3NDQUFlLFlBQVk7cUVBQTRGO0FBakJ2SCwrQkFBK0I7SUFwRDNDLFNBQVMsQ0FBQztRQUNQLFFBQVEsRUFBRSwwQkFBMEI7UUFDcEMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E2Q1Q7UUFDRCxJQUFJLEVBQUU7WUFDRixrQkFBa0IsRUFBRSxLQUFLO1NBQzVCO0tBQ0osQ0FBQzs7R0FDVywrQkFBK0IsQ0E0QzNDO1NBNUNZLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBUZW1wbGF0ZVJlZiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7XHJcbiAgICBTY2hlZHVsZXJWaWV3RGF5LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudCxcclxuICAgIFNjaGVkdWxlclZpZXdFdmVudFxyXG59IGZyb20gJy4vbW9kZWxzJztcclxuXHJcbi8vIFdPUktBUk9VTkQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9kaGVyZ2VzL25nLXBhY2thZ3IvaXNzdWVzLzIxNyNpc3N1ZWNvbW1lbnQtMzM5NDYwMjU1XHJcbmltcG9ydCAqIGFzIG1vbWVudEltcG9ydGVkIGZyb20gJ21vbWVudCc7XHJcbmNvbnN0IG1vbWVudCA9IG1vbWVudEltcG9ydGVkO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjZGVmYXVsdFRlbXBsYXRlPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FsLXNjaGVkdWxlci1ldmVudFwiXHJcbiAgICAgICAgICAgICAgICBbdGl0bGVdPVwidGl0bGVcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmNhbC1kaXNhYmxlZF09XCJldmVudC5ldmVudC5pc0Rpc2FibGVkXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5jYWwtbm90LWNsaWNrYWJsZV09XCIhZXZlbnQuZXZlbnQuaXNDbGlja2FibGVcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmNhbC1kcmFnZ2FibGVdPVwiZXZlbnQuZXZlbnQuZHJhZ2dhYmxlXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5jYWwtc3RhcnRzLWJlZm9yZS1kYXldPVwiZXZlbnQuc3RhcnRzQmVmb3JlRGF5XCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5jYWwtZW5kcy1hZnRlci1kYXldPVwiZXZlbnQuZW5kc0FmdGVyRGF5XCJcclxuICAgICAgICAgICAgICAgIFtzdHlsZS5iYWNrZ3JvdW5kQ29sb3JdPVwiZXZlbnQuZXZlbnQuY29sb3I/LnNlY29uZGFyeVwiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUuYm9yZGVyQ29sb3JdPVwiZXZlbnQuZXZlbnQuY29sb3I/LnByaW1hcnlcIlxyXG4gICAgICAgICAgICAgICAgKG13bENsaWNrKT1cIm9uRXZlbnRDbGljaygkZXZlbnQsIGV2ZW50LmV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAobW91c2VlbnRlcik9XCJvbk1vdXNlRW50ZXIoKVwiXHJcbiAgICAgICAgICAgICAgICAobW91c2VsZWF2ZSk9XCJvbk1vdXNlTGVhdmUoKVwiPlxyXG4gICAgICAgICAgICAgICAgPGNhbGVuZGFyLXNjaGVkdWxlci1ldmVudC10aXRsZVxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc9XCJ3ZWVrXCJcclxuICAgICAgICAgICAgICAgICAgICBbZXZlbnRdPVwiZXZlbnQuZXZlbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtzaG93U3RhdHVzXT1cInNob3dTdGF0dXNcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtzaG93Q29udGVudF09XCJzaG93Q29udGVudFwiXHJcbiAgICAgICAgICAgICAgICAgICAgW3Nob3dBY3Rpb25zXT1cInNob3dBY3Rpb25zXCJcclxuICAgICAgICAgICAgICAgICAgICBbY3VzdG9tVGVtcGxhdGVdPVwiZXZlbnRUaXRsZVRlbXBsYXRlXCI+XHJcbiAgICAgICAgICAgICAgICA8L2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC10aXRsZT5cclxuICAgICAgICAgICAgICAgIDxjYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICpuZ0lmPVwic2hvd0NvbnRlbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgIFtldmVudF09XCJldmVudC5ldmVudFwiPlxyXG4gICAgICAgICAgICAgICAgPC9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtY29udGVudD5cclxuICAgICAgICAgICAgICAgIDxjYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtYWN0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICpuZ0lmPVwic2hvd0FjdGlvbnMgJiYgc2hvd0NvbnRlbnQgJiYgKGV2ZW50LmV2ZW50LmlzQ2xpY2thYmxlIHx8IGV2ZW50LmV2ZW50LmlzRGlzYWJsZWQpXCJcclxuICAgICAgICAgICAgICAgICAgICBbZXZlbnRdPVwiZXZlbnQuZXZlbnRcIj5cclxuICAgICAgICAgICAgICAgIDwvY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LWFjdGlvbnM+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgPG5nLXRlbXBsYXRlXHJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImN1c3RvbVRlbXBsYXRlIHx8IGRlZmF1bHRUZW1wbGF0ZVwiXHJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBkYXk6IGRheSxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgIHNob3dDb250ZW50OiBzaG93Q29udGVudCxcclxuICAgICAgICAgICAgICAgIHNob3dBY3Rpb25zOiBzaG93QWN0aW9ucyxcclxuICAgICAgICAgICAgICAgIHNob3dTdGF0dXM6IHNob3dTdGF0dXMsXHJcbiAgICAgICAgICAgICAgICBldmVudFRpdGxlVGVtcGxhdGU6IGV2ZW50VGl0bGVUZW1wbGF0ZSxcclxuICAgICAgICAgICAgICAgIGV2ZW50Q2xpY2tlZDogZXZlbnRDbGlja2VkXHJcbiAgICAgICAgICAgIH1cIj5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgYCxcclxuICAgIGhvc3Q6IHtcclxuICAgICAgICAnW3N0eWxlLmhlaWdodC4lXSc6ICcxMDAnXHJcbiAgICB9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDYWxlbmRhclNjaGVkdWxlckV2ZW50Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgZGF5OiBTY2hlZHVsZXJWaWV3RGF5O1xyXG5cclxuICAgIEBJbnB1dCgpIGV2ZW50OiBTY2hlZHVsZXJWaWV3RXZlbnQ7XHJcblxyXG4gICAgQElucHV0KCkgc2hvd0NvbnRlbnQ6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dBY3Rpb25zOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93U3RhdHVzOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBjdXN0b21UZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuXHJcbiAgICBASW5wdXQoKSBldmVudFRpdGxlVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gICAgQE91dHB1dCgpIGV2ZW50Q2xpY2tlZDogRXZlbnRFbWl0dGVyPHsgZXZlbnQ6IENhbGVuZGFyU2NoZWR1bGVyRXZlbnQgfT4gPSBuZXcgRXZlbnRFbWl0dGVyPHsgZXZlbnQ6IENhbGVuZGFyU2NoZWR1bGVyRXZlbnQgfT4oKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLnRpdGxlIHx8IGAke3RoaXMuZXZlbnQuZXZlbnQudGl0bGV9LCAke21vbWVudCh0aGlzLmV2ZW50LmV2ZW50LnN0YXJ0KS5mb3JtYXQoJ2RkZGQgTCwgTFQnKX1gO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VFbnRlcigpOiB2b2lkIHtcclxuICAgICAgICAvLyBNYXliZSBkbyBzb21ldGhpbmdcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlTGVhdmUoKTogdm9pZCB7XHJcbiAgICAgICAgLy8gTWF5YmUgZG8gc29tZXRoaW5nXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaGlkZGVuXHJcbiAgICAgKi9cclxuICAgIG9uRXZlbnRDbGljayhtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBldmVudDogQ2FsZW5kYXJTY2hlZHVsZXJFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmIChtb3VzZUV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xyXG4gICAgICAgICAgICBtb3VzZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZXZlbnQuaXNDbGlja2FibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudENsaWNrZWQuZW1pdCh7IGV2ZW50OiBldmVudCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19