import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';
// WORKAROUND: https://github.com/dherges/ng-packagr/issues/217#issuecomment-339460255
import * as momentImported from 'moment';
const moment = momentImported;
let CalendarSchedulerHourSegmentComponent = class CalendarSchedulerHourSegmentComponent {
    constructor() {
        this.hourSegmentHeight = 58;
        this.showHour = false;
        this.segmentClicked = new EventEmitter();
    }
    ngOnInit() {
        this.title = this.title || moment(this.segment.date).format('dddd L, LT');
    }
    /**
     * @hidden
     */
    onMouseEnter(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    }
    /**
     * @hidden
     */
    onMouseLeave(mouseEvent, segment, event) {
        if (!event.isDisabled && !segment.isDisabled) {
            // Maybe do something
        }
    }
    /**
     * @hidden
     */
    onSegmentClick(mouseEvent, segment) {
        if (mouseEvent.stopPropagation) {
            mouseEvent.stopPropagation();
        }
        if (segment.events.length === 0) {
            this.segmentClicked.emit({ segment: segment });
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], CalendarSchedulerHourSegmentComponent.prototype, "title", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], CalendarSchedulerHourSegmentComponent.prototype, "day", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], CalendarSchedulerHourSegmentComponent.prototype, "segment", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], CalendarSchedulerHourSegmentComponent.prototype, "locale", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], CalendarSchedulerHourSegmentComponent.prototype, "customTemplate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], CalendarSchedulerHourSegmentComponent.prototype, "hourSegmentHeight", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], CalendarSchedulerHourSegmentComponent.prototype, "showHour", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], CalendarSchedulerHourSegmentComponent.prototype, "segmentClicked", void 0);
CalendarSchedulerHourSegmentComponent = tslib_1.__decorate([
    Component({
        selector: 'calendar-scheduler-hour-segment',
        template: `
        <ng-template #defaultTemplate>
            <div class="cal-scheduler-hour-segment"
                [title]="title"
                [ngClass]="segment?.cssClass"
                [class.has-events]="segment.events.length > 0"
                [class.cal-disabled]="segment.isDisabled"
                [style.backgroundColor]="segment.backgroundColor"
                [style.height.px]="hourSegmentHeight"
                (mwlClick)="onSegmentClick($event, segment)">
                <div class="cal-scheduler-time" *ngIf="showHour">
                    {{ segment.date | calendarDate:'dayViewHour':locale }}
                </div>
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                title: title,
                day: day,
                segment: segment,
                locale: locale,
                hourSegmentHeight: hourSegmentHeight,
                showHour: showHour,
                segmentClicked: segmentClicked
            }">
        </ng-template>
    `
    })
], CalendarSchedulerHourSegmentComponent);
export { CalendarSchedulerHourSegmentComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWhvdXItc2VnbWVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWNhbGVuZGFyLXNjaGVkdWxlci8iLCJzb3VyY2VzIjpbIm1vZHVsZXMvc2NoZWR1bGVyL2NhbGVuZGFyLXNjaGVkdWxlci1ob3VyLXNlZ21lbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU81RixzRkFBc0Y7QUFDdEYsT0FBTyxLQUFLLGNBQWMsTUFBTSxRQUFRLENBQUM7QUFDekMsTUFBTSxNQUFNLEdBQUcsY0FBYyxDQUFDO0FBaUM5QixJQUFhLHFDQUFxQyxHQUFsRCxNQUFhLHFDQUFxQztJQS9CbEQ7UUEwQ2Esc0JBQWlCLEdBQVcsRUFBRSxDQUFDO1FBRS9CLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFFekIsbUJBQWMsR0FBd0QsSUFBSSxZQUFZLEVBQXlDLENBQUM7SUFvQzlJLENBQUM7SUFsQ0csUUFBUTtRQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsWUFBWSxDQUFDLFVBQXNCLEVBQUUsT0FBaUMsRUFBRSxLQUE2QjtRQUNqRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDMUMscUJBQXFCO1NBQ3hCO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsWUFBWSxDQUFDLFVBQXNCLEVBQUUsT0FBaUMsRUFBRSxLQUE2QjtRQUNqRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUU7WUFDMUMscUJBQXFCO1NBQ3hCO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0gsY0FBYyxDQUFDLFVBQXNCLEVBQUUsT0FBaUM7UUFDcEUsSUFBSSxVQUFVLENBQUMsZUFBZSxFQUFFO1lBQzVCLFVBQVUsQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUNoQztRQUVELElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDO0NBQ0osQ0FBQTtBQWxEWTtJQUFSLEtBQUssRUFBRTs7b0VBQWU7QUFFZDtJQUFSLEtBQUssRUFBRTs7a0VBQXVCO0FBRXRCO0lBQVIsS0FBSyxFQUFFOztzRUFBbUM7QUFFbEM7SUFBUixLQUFLLEVBQUU7O3FFQUFnQjtBQUVmO0lBQVIsS0FBSyxFQUFFO3NDQUFpQixXQUFXOzZFQUFNO0FBRWpDO0lBQVIsS0FBSyxFQUFFOztnRkFBZ0M7QUFFL0I7SUFBUixLQUFLLEVBQUU7O3VFQUEyQjtBQUV6QjtJQUFULE1BQU0sRUFBRTtzQ0FBaUIsWUFBWTs2RUFBb0c7QUFmakkscUNBQXFDO0lBL0JqRCxTQUFTLENBQUM7UUFDUCxRQUFRLEVBQUUsaUNBQWlDO1FBQzNDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBMkJUO0tBQ0osQ0FBQztHQUNXLHFDQUFxQyxDQW1EakQ7U0FuRFkscUNBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtcclxuICAgIFNjaGVkdWxlclZpZXdEYXksXHJcbiAgICBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQsXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckV2ZW50XHJcbn0gZnJvbSAnLi9tb2RlbHMnO1xyXG5cclxuLy8gV09SS0FST1VORDogaHR0cHM6Ly9naXRodWIuY29tL2RoZXJnZXMvbmctcGFja2Fnci9pc3N1ZXMvMjE3I2lzc3VlY29tbWVudC0zMzk0NjAyNTVcclxuaW1wb3J0ICogYXMgbW9tZW50SW1wb3J0ZWQgZnJvbSAnbW9tZW50JztcclxuY29uc3QgbW9tZW50ID0gbW9tZW50SW1wb3J0ZWQ7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnY2FsZW5kYXItc2NoZWR1bGVyLWhvdXItc2VnbWVudCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgICAgIDxuZy10ZW1wbGF0ZSAjZGVmYXVsdFRlbXBsYXRlPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FsLXNjaGVkdWxlci1ob3VyLXNlZ21lbnRcIlxyXG4gICAgICAgICAgICAgICAgW3RpdGxlXT1cInRpdGxlXCJcclxuICAgICAgICAgICAgICAgIFtuZ0NsYXNzXT1cInNlZ21lbnQ/LmNzc0NsYXNzXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5oYXMtZXZlbnRzXT1cInNlZ21lbnQuZXZlbnRzLmxlbmd0aCA+IDBcIlxyXG4gICAgICAgICAgICAgICAgW2NsYXNzLmNhbC1kaXNhYmxlZF09XCJzZWdtZW50LmlzRGlzYWJsZWRcIlxyXG4gICAgICAgICAgICAgICAgW3N0eWxlLmJhY2tncm91bmRDb2xvcl09XCJzZWdtZW50LmJhY2tncm91bmRDb2xvclwiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUuaGVpZ2h0LnB4XT1cImhvdXJTZWdtZW50SGVpZ2h0XCJcclxuICAgICAgICAgICAgICAgIChtd2xDbGljayk9XCJvblNlZ21lbnRDbGljaygkZXZlbnQsIHNlZ21lbnQpXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FsLXNjaGVkdWxlci10aW1lXCIgKm5nSWY9XCJzaG93SG91clwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt7IHNlZ21lbnQuZGF0ZSB8IGNhbGVuZGFyRGF0ZTonZGF5Vmlld0hvdXInOmxvY2FsZSB9fVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICAgICAgPG5nLXRlbXBsYXRlXHJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImN1c3RvbVRlbXBsYXRlIHx8IGRlZmF1bHRUZW1wbGF0ZVwiXHJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgICAgICBkYXk6IGRheSxcclxuICAgICAgICAgICAgICAgIHNlZ21lbnQ6IHNlZ21lbnQsXHJcbiAgICAgICAgICAgICAgICBsb2NhbGU6IGxvY2FsZSxcclxuICAgICAgICAgICAgICAgIGhvdXJTZWdtZW50SGVpZ2h0OiBob3VyU2VnbWVudEhlaWdodCxcclxuICAgICAgICAgICAgICAgIHNob3dIb3VyOiBzaG93SG91cixcclxuICAgICAgICAgICAgICAgIHNlZ21lbnRDbGlja2VkOiBzZWdtZW50Q2xpY2tlZFxyXG4gICAgICAgICAgICB9XCI+XHJcbiAgICAgICAgPC9uZy10ZW1wbGF0ZT5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyU2NoZWR1bGVySG91clNlZ21lbnRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcclxuXHJcbiAgICBASW5wdXQoKSBkYXk6IFNjaGVkdWxlclZpZXdEYXk7XHJcblxyXG4gICAgQElucHV0KCkgc2VnbWVudDogU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50O1xyXG5cclxuICAgIEBJbnB1dCgpIGxvY2FsZTogc3RyaW5nO1xyXG5cclxuICAgIEBJbnB1dCgpIGN1c3RvbVRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG5cclxuICAgIEBJbnB1dCgpIGhvdXJTZWdtZW50SGVpZ2h0OiBudW1iZXIgPSA1ODtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93SG91cjogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAgIEBPdXRwdXQoKSBzZWdtZW50Q2xpY2tlZDogRXZlbnRFbWl0dGVyPHsgc2VnbWVudDogU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50IH0+ID0gbmV3IEV2ZW50RW1pdHRlcjx7IHNlZ21lbnQ6IFNjaGVkdWxlclZpZXdIb3VyU2VnbWVudCB9PigpO1xyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aGlzLnRpdGxlIHx8IG1vbWVudCh0aGlzLnNlZ21lbnQuZGF0ZSkuZm9ybWF0KCdkZGRkIEwsIExUJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAaGlkZGVuXHJcbiAgICAgKi9cclxuICAgIG9uTW91c2VFbnRlcihtb3VzZUV2ZW50OiBNb3VzZUV2ZW50LCBzZWdtZW50OiBTY2hlZHVsZXJWaWV3SG91clNlZ21lbnQsIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCFldmVudC5pc0Rpc2FibGVkICYmICFzZWdtZW50LmlzRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgLy8gTWF5YmUgZG8gc29tZXRoaW5nXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQGhpZGRlblxyXG4gICAgICovXHJcbiAgICBvbk1vdXNlTGVhdmUobW91c2VFdmVudDogTW91c2VFdmVudCwgc2VnbWVudDogU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50LCBldmVudDogQ2FsZW5kYXJTY2hlZHVsZXJFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghZXZlbnQuaXNEaXNhYmxlZCAmJiAhc2VnbWVudC5pc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIC8vIE1heWJlIGRvIHNvbWV0aGluZ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgb25TZWdtZW50Q2xpY2sobW91c2VFdmVudDogTW91c2VFdmVudCwgc2VnbWVudDogU2NoZWR1bGVyVmlld0hvdXJTZWdtZW50KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKG1vdXNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XHJcbiAgICAgICAgICAgIG1vdXNlRXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2VnbWVudC5ldmVudHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VnbWVudENsaWNrZWQuZW1pdCh7IHNlZ21lbnQ6IHNlZ21lbnQgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==