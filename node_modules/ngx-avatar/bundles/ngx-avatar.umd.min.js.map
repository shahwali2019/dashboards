{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://ngx-avatar/lib/sources/async-source.ts","ng://ngx-avatar/lib/sources/avatar-source.enum.ts","ng://ngx-avatar/lib/sources/facebook.ts","ng://ngx-avatar/lib/sources/twitter.ts","ng://ngx-avatar/lib/sources/google.ts","ng://ngx-avatar/lib/sources/custom.ts","ng://ngx-avatar/lib/sources/initials.ts","ng://ngx-avatar/lib/sources/gravatar.ts","ng://ngx-avatar/lib/sources/skype.ts","ng://ngx-avatar/lib/sources/value.ts","ng://ngx-avatar/lib/sources/vkontakte.ts","ng://ngx-avatar/lib/sources/github.ts","ng://ngx-avatar/lib/sources/source.factory.ts","ng://ngx-avatar/lib/avatar-config.token.ts","ng://ngx-avatar/lib/avatar-config.service.ts","ng://ngx-avatar/lib/avatar.service.ts","ng://ngx-avatar/lib/avatar.component.ts","ng://ngx-avatar/lib/avatar.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","sourceId","FACEBOOK","GOOGLE","TWITTER","VKONTAKTE","SKYPE","GRAVATAR","GITHUB","CUSTOM","INITIALS","VALUE","Facebook","sourceType","AvatarSource","getAvatar","size","Twitter","twitterImgSize","getImageSize","Google","_this","_super","tslib_1.__extends","processResponse","data","avatarSrc","entry","gphoto$thumbnail","$t","replace","AsyncSource","Custom","Initials","initialsSize","getInitials","name","trim","initials","split","constructInitials","slice","elements","filter","element","map","toUpperCase","join","Gravatar","match","Md5","hashStr","toString","avatarSize","isRetina","Skype","Value","Vkontakte","imgSize","sizeProperty","keys","pop","Github","avatar_url","SourceFactory","sources","newInstance","sourceValue","Injectable","AVATAR_CONFIG","InjectionToken","AvatarConfigService","userConfig","getAvatarSources","defaultSources","sourcePriorityOrder","validSources_1","Set","source","includes","getAvatarColors","defaultColors","colors","Optional","type","Inject","args","AvatarService","http","avatarConfigService","avatarSources","avatarColors","overrideAvatarSources","overrideAvatarColors","fetchAvatar","avatarUrl","get","getRandomColor","avatarText","asciiCodeSum","calculateAsciiCode","copmareSources","sourceType1","sourceType2","getSourcePriority","isSource","isTextAvatar","letter","charCodeAt","reduce","previous","current","indexOf","HttpClient","AvatarComponent","elementRef","sourceFactory","avatarService","round","textSizeRatio","fgColor","style","cornerRadius","clickOnAvatar","EventEmitter","isAlive","avatarStyle","hostStyle","currentSource","onAvatarClicked","emit","ngOnChanges","changes","propName","currentValue","addSource","initializeAvatar","fetchAvatarSource","event","avatarSource","buildTextAvatar","undefined","buildImageAvatar","ngOnDestroy","sortAvatarSources","width","height","sort","source1","source2","getInitialsStyle","getImageStyle","fetchAndProcessAsyncAvatar","avatarValue","textAlign","borderRadius","border","borderColor","textTransform","color","backgroundColor","bgColor","font","Math","floor","lineHeight","maxWidth","pipe","takeWhile","response","subscribe","err","console","isSourceExist","index","findIndex","Component","selector","template","ElementRef","Input","Output","AvatarModule","forRoot","avatarConfig","ngModule","providers","provide","useValue","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Contract of all async sources.\n * Every async source must implement the processResponse method that extracts the avatar url from the data\n */\nexport abstract class AsyncSource implements Source {\n  readonly sourceType: AvatarSource;\n\n  constructor(public sourceId: string) {}\n\n  abstract getAvatar(size?: number): string;\n  abstract processResponse(data: any, size?: number): string;\n}\n","export enum AvatarSource {\n  FACEBOOK = 'facebook',\n  GOOGLE = 'google',\n  TWITTER = 'twitter',\n  VKONTAKTE = 'vkontakte',\n  SKYPE = 'skype',\n  GRAVATAR = 'gravatar',\n  GITHUB = 'github',\n  CUSTOM = 'custom',\n  INITIALS = 'initials',\n  VALUE = 'value'\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Facebook source impelementation.\n *  Fetch avatar source based on facebook identifier\n *  and image size\n */\nexport class Facebook implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.FACEBOOK;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(size: number): string {\n    return (\n      'https://graph.facebook.com/' +\n      `${this.sourceId}/picture?width=${size}&height=${size}`\n    );\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Twitter source impelementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Twitter implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.TWITTER;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(size: number): string {\n    const twitterImgSize = this.getImageSize(size);\n    return `https://twitter.com/${\n      this.sourceId\n    }/profile_image?size=${twitterImgSize}`;\n  }\n\n  private getImageSize(size: number) {\n    if (size <= 24) {\n      return 'mini';\n    }\n\n    if (size <= 48) {\n      return 'normal';\n    }\n\n    if (size <= 73) {\n      return 'bigger';\n    }\n\n    return 'original';\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Google source impelementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Google extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GOOGLE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://picasaweb.google.com/data/entry/api/user/${\n      this.sourceId\n    }?alt=json`;\n  }\n\n  /**\n   * Extract google avatar from json data\n   */\n  public processResponse(data: any, size?: number): string {\n    const avatarSrc = data.entry.gphoto$thumbnail.$t;\n    if (avatarSrc) {\n      return avatarSrc.replace('s64', 's' + size);\n    }\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Custom source impelementation.\n *  return custom image as an avatar\n *\n */\nexport class Custom implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.CUSTOM;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Initials source impelementation.\n * return the initals of the given value\n */\nexport class Initials implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.INITIALS;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(initialsSize: number): string {\n    return this.getInitials(this.sourceId, initialsSize);\n  }\n\n  /**\n   * Returns the initial letters of a name in a string.\n   */\n  private getInitials(name: string, size: number): string {\n    name = name ? name.trim() : null;\n\n    if (!name) {\n      return '';\n    }\n\n    const initials = name.split(' ');\n\n    if (size && size < initials.length) {\n      return this.constructInitials(initials.slice(0, size));\n    } else {\n      return this.constructInitials(initials);\n    }\n  }\n\n  /**\n   * Iterates a person's name string to get the initials of each word in uppercase.\n   */\n  private constructInitials(elements: string[]): string {\n    if (!elements || !elements.length) {\n      return '';\n    }\n\n    return elements\n      .filter(element => element && element.length > 0)\n      .map(element => element[0].toUpperCase())\n      .join('');\n  }\n}\n","import isRetina from 'is-retina';\nimport { Md5 } from 'ts-md5/dist/md5';\n\nimport { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Gravatar source impelementation.\n *  Fetch avatar source based on gravatar email\n */\nexport class Gravatar implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.GRAVATAR;\n  public sourceId: string;\n\n  constructor(public value: string) {\n    this.sourceId = value.match('^[a-f0-9]{32}$')\n      ? value\n      : Md5.hashStr(value).toString();\n  }\n\n  public getAvatar(size: number): string {\n    const avatarSize = isRetina() ? size * 2 : size;\n    return `https://secure.gravatar.com/avatar/${\n      this.sourceId\n    }?s=${avatarSize}&d=404`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Skype source impelementation.\n *  Fetch avatar source based on skype identifier\n */\nexport class Skype implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.SKYPE;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return `https://api.skype.com/users/${this.sourceId}/profile/avatar`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Value source impelementation.\n *  return the value as avatar\n */\nexport class Value implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.VALUE;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Vkontakte source impelementation.\n *  Fetch avatar source based on vkontakte identifier\n *  and image size\n */\nconst apiVersion = 5.8;\nexport class Vkontakte extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.VKONTAKTE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(size: number): string {\n    const imgSize = this.getImageSize(size);\n    return `https://api.vk.com/method/users.get?user_id=${\n      this.sourceId\n    }&v=${apiVersion}&fields=${imgSize}`;\n  }\n\n  /**\n   * extract vkontakte avatar from json data\n   */\n  public processResponse(data: any): string {\n    // avatar key property is the size used to generate avatar url\n    // size property is always the last key in the response object\n    const sizeProperty = Object.keys(data['response'][0]).pop();\n    // return avatar src\n    return data['response'][0][sizeProperty];\n  }\n\n  /**\n   * Returns image size related to vkontakte API\n   */\n  private getImageSize(size: number): string {\n    if (size <= 50) {\n      return 'photo_50';\n    }\n\n    if (size <= 100) {\n      return 'photo_100';\n    }\n\n    if (size <= 200) {\n      return 'photo_200';\n    }\n\n    return 'photo_max';\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Github source impelementation.\n *  Fetch avatar source based on github identifier\n */\nexport class Github extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GITHUB;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://api.github.com/users/${this.sourceId}`;\n  }\n\n  /**\n   * extract github avatar from json data\n   */\n  public processResponse(data: any, size?: number): string {\n    if (size) {\n      return `${data.avatar_url}&s=${size}`;\n    }\n    return data.avatar_url;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Source } from './source';\nimport { Facebook } from './facebook';\nimport { Twitter } from './twitter';\nimport { Google } from './google';\nimport { Custom } from './custom';\nimport { Initials } from './initials';\nimport { Gravatar } from './gravatar';\nimport { Skype } from './skype';\nimport { Value } from './value';\nimport { Vkontakte } from './vkontakte';\nimport { Github } from './github';\nimport { SourceCreator } from './source.creator';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Factory class that implements factory method pattern.\n * Used to create Source implementation class based\n * on the source Type\n */\n@Injectable()\nexport class SourceFactory {\n  private sources: { [key: string]: SourceCreator } = {};\n\n  constructor() {\n    this.sources[AvatarSource.FACEBOOK] = Facebook;\n    this.sources[AvatarSource.TWITTER] = Twitter;\n    this.sources[AvatarSource.GOOGLE] = Google;\n    this.sources[AvatarSource.SKYPE] = Skype;\n    this.sources[AvatarSource.GRAVATAR] = Gravatar;\n    this.sources[AvatarSource.CUSTOM] = Custom;\n    this.sources[AvatarSource.INITIALS] = Initials;\n    this.sources[AvatarSource.VALUE] = Value;\n    this.sources[AvatarSource.VKONTAKTE] = Vkontakte;\n    this.sources[AvatarSource.GITHUB] = Github;\n  }\n\n  public newInstance(sourceType: AvatarSource, sourceValue: string): Source {\n    return new this.sources[sourceType](sourceValue);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AvatarConfig } from './avatar-config';\n/**\n * Token used to inject the AvatarConfig object\n */\nexport const AVATAR_CONFIG = new InjectionToken<AvatarConfig>('avatar.config');\n","import { Injectable, Inject, Optional } from '@angular/core';\n\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { AVATAR_CONFIG } from './avatar-config.token';\nimport { AvatarConfig } from './avatar-config';\n\n@Injectable()\nexport class AvatarConfigService {\n  constructor(\n    @Optional()\n    @Inject(AVATAR_CONFIG)\n    public userConfig: AvatarConfig\n  ) {}\n\n  public getAvatarSources(defaultSources: AvatarSource[]): AvatarSource[] {\n    if (\n      this.userConfig &&\n      this.userConfig.sourcePriorityOrder &&\n      this.userConfig.sourcePriorityOrder.length\n    ) {\n      const uniqueSources = [...new Set(this.userConfig.sourcePriorityOrder)];\n      const validSources = uniqueSources.filter(source =>\n        defaultSources.includes(source)\n      );\n      return [\n        ...validSources,\n        ...defaultSources.filter(source => !validSources.includes(source))\n      ];\n    }\n    return defaultSources;\n  }\n\n  public getAvatarColors(defaultColors: string[]): string[] {\n    return (\n      (this.userConfig &&\n        this.userConfig.colors &&\n        this.userConfig.colors.length &&\n        this.userConfig.colors) ||\n      defaultColors\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { AvatarConfigService } from './avatar-config.service';\nimport { AvatarSource } from './sources/avatar-source.enum';\n\n/**\n * list of Supported avatar sources\n */\nexport const defaultSources = [\n  AvatarSource.FACEBOOK,\n  AvatarSource.GOOGLE,\n  AvatarSource.TWITTER,\n  AvatarSource.VKONTAKTE,\n  AvatarSource.SKYPE,\n  AvatarSource.GRAVATAR,\n  AvatarSource.GITHUB,\n  AvatarSource.CUSTOM,\n  AvatarSource.INITIALS,\n  AvatarSource.VALUE\n];\n\n/**\n * list of default colors\n */\nexport const defaultColors = [\n  '#1abc9c',\n  '#3498db',\n  '#f1c40f',\n  '#8e44ad',\n  '#e74c3c',\n  '#d35400',\n  '#2c3e50',\n  '#7f8c8d'\n];\n\n/**\n * Provides utilities methods related to Avatar component\n */\n@Injectable()\nexport class AvatarService {\n  public avatarSources: AvatarSource[] = defaultSources;\n  public avatarColors: string[] = defaultColors;\n\n  constructor(\n    private http: HttpClient,\n    private avatarConfigService: AvatarConfigService\n  ) {\n    this.overrideAvatarSources();\n    this.overrideAvatarColors();\n  }\n\n  public fetchAvatar(avatarUrl: string): Observable<any> {\n    return this.http.get(avatarUrl);\n  }\n\n  public getRandomColor(avatarText: string): string {\n    if (!avatarText) {\n      return 'transparent';\n    }\n    const asciiCodeSum = this.calculateAsciiCode(avatarText);\n    return this.avatarColors[asciiCodeSum % this.avatarColors.length];\n  }\n\n  public copmareSources(\n    sourceType1: AvatarSource,\n    sourceType2: AvatarSource\n  ): number {\n    return (\n      this.getSourcePriority(sourceType1) - this.getSourcePriority(sourceType2)\n    );\n  }\n\n  public isSource(source: string): boolean {\n    return this.avatarSources.includes(source as AvatarSource);\n  }\n\n  public isTextAvatar(sourceType: AvatarSource): boolean {\n    return [AvatarSource.INITIALS, AvatarSource.VALUE].includes(sourceType);\n  }\n\n  private overrideAvatarSources(): void {\n    this.avatarSources = this.avatarConfigService.getAvatarSources(\n      defaultSources\n    );\n  }\n\n  private overrideAvatarColors(): void {\n    this.avatarColors = this.avatarConfigService.getAvatarColors(defaultColors);\n  }\n\n  private calculateAsciiCode(value: string): number {\n    return value\n      .split('')\n      .map(letter => letter.charCodeAt(0))\n      .reduce((previous, current) => previous + current);\n  }\n\n  private getSourcePriority(sourceType: AvatarSource) {\n    return this.avatarSources.indexOf(sourceType);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChange,\n  OnDestroy\n} from '@angular/core';\n\nimport { Source } from './sources/source';\nimport { AsyncSource } from './sources/async-source';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { takeWhile, map } from 'rxjs/operators';\n\n/**\n * Universal avatar component that\n * generates avatar from different sources\n *\n * export\n * class AvatarComponent\n * implements {OnChanges}\n */\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-avatar',\n  styles: [\n    `\n      :host {\n        border-radius: '50%';\n      }\n    `\n  ],\n  template: `\n    <div\n      (click)=\"onAvatarClicked()\"\n      class=\"avatar-container\"\n      [ngStyle]=\"hostStyle\"\n    >\n      <img\n        *ngIf=\"avatarSrc; else textAvatar\"\n        [src]=\"avatarSrc\"\n        [width]=\"size\"\n        [height]=\"size\"\n        [ngStyle]=\"avatarStyle\"\n        (error)=\"fetchAvatarSource($event)\"\n        class=\"avatar-content\"\n      />\n      <ng-template #textAvatar>\n        <div *ngIf=\"avatarText\" class=\"avatar-content\" [ngStyle]=\"avatarStyle\">\n          {{ avatarText }}\n        </div>\n      </ng-template>\n    </div>\n  `\n})\nexport class AvatarComponent implements OnChanges, OnDestroy {\n  @Input()\n  public round = true;\n  @Input()\n  public size = 50;\n  @Input()\n  public textSizeRatio = 3;\n  @Input()\n  public bgColor: string;\n  @Input()\n  public fgColor = '#FFF';\n  @Input()\n  public borderColor: string;\n  @Input()\n  public style: any = {};\n  @Input()\n  public cornerRadius = 0;\n  @Input('facebookId')\n  public facebook: string;\n  @Input('twitterId')\n  public twitter: string;\n  @Input('googleId')\n  public google: string;\n  @Input('vkontakteId')\n  public vkontakte: string;\n  @Input('skypeId')\n  public skype: string;\n  @Input('gravatarId')\n  public gravatar: string;\n  @Input('githubId')\n  public github: string;\n  @Input('src')\n  public custom: string;\n  @Input('name')\n  public initials: string;\n  @Input('value')\n  public value: string;\n  @Input('placeholder')\n  public placeholder: string;\n  @Input('initialsSize')\n  public initialsSize: number;\n\n  @Output()\n  public clickOnAvatar: EventEmitter<any> = new EventEmitter<any>();\n\n  public isAlive = true;\n  public avatarSrc: string;\n  public avatarText: string;\n  public avatarStyle: any = {};\n  public hostStyle: any = {};\n\n  private currentSource = 0;\n  private sources: Source[] = Array();\n\n  constructor(\n    public elementRef: ElementRef,\n    public sourceFactory: SourceFactory,\n    private avatarService: AvatarService\n  ) {}\n\n  public onAvatarClicked(): void {\n    this.clickOnAvatar.emit(this.sources[this.currentSource - 1]);\n  }\n\n  /**\n   * Detect inputs change\n   *\n   * param {{ [propKey: string]: SimpleChange }} changes\n   *\n   * memberof AvatarComponent\n   */\n  public ngOnChanges(changes: { [propKey: string]: SimpleChange }): void {\n    for (const propName in changes) {\n      if (\n        this.avatarService.isSource(propName) &&\n        changes[propName].currentValue\n      ) {\n        const currentValue = changes[propName].currentValue;\n        this.addSource(AvatarSource[propName.toUpperCase()], currentValue);\n      }\n    }\n    // reintialize the avatar component when a source property value has changed\n    // the fallback system must be re-invoked with the new values.\n    this.initializeAvatar();\n  }\n\n  /**\n   * Fetch avatar source\n   *\n   * param {any} event\n   *\n   * memberOf AvatarComponent\n   */\n  public fetchAvatarSource(event?: any): void {\n    const avatarSource = this.sources[this.currentSource];\n    if (!avatarSource) {\n      return;\n    }\n    if (this.avatarService.isTextAvatar(avatarSource.sourceType)) {\n      this.buildTextAvatar(avatarSource);\n      // TODO: check if this is needed\n      this.avatarSrc = undefined;\n    } else {\n      this.buildImageAvatar(avatarSource);\n    }\n    this.currentSource++;\n  }\n\n  public ngOnDestroy(): void {\n    this.isAlive = false;\n  }\n\n  /**\n   * Initialize the avatar component and its fallback system\n   */\n  private initializeAvatar(): void {\n    this.currentSource = 0;\n    if (this.sources.length > 0 && this.sources[this.currentSource]) {\n      this.sortAvatarSources();\n      this.fetchAvatarSource();\n      this.hostStyle = {\n        width: this.size + 'px',\n        height: this.size + 'px'\n      };\n    }\n  }\n\n  private sortAvatarSources(): void {\n    this.sources.sort((source1, source2) =>\n      this.avatarService.copmareSources(source1.sourceType, source2.sourceType)\n    );\n  }\n\n  private buildTextAvatar(avatarSource: Source): void {\n    this.avatarText = avatarSource.getAvatar(this.initialsSize);\n    this.avatarStyle = this.getInitialsStyle(avatarSource.sourceId);\n  }\n\n  private buildImageAvatar(avatarSource: Source): void {\n    this.avatarStyle = this.getImageStyle();\n    if (avatarSource instanceof AsyncSource) {\n      this.fetchAndProcessAsyncAvatar(avatarSource);\n    } else {\n      this.avatarSrc = avatarSource.getAvatar(this.size);\n    }\n  }\n\n  /**\n   *\n   * returns initials style\n   *\n   * memberOf AvatarComponent\n   */\n  private getInitialsStyle(avatarValue: string): void {\n    return {\n      textAlign: 'center',\n      borderRadius: this.round ? '100%' : this.cornerRadius + 'px',\n      border: this.borderColor ? '1px solid ' + this.borderColor : '',\n      textTransform: 'uppercase',\n      color: this.fgColor,\n      backgroundColor: this.bgColor\n        ? this.bgColor\n        : this.avatarService.getRandomColor(avatarValue),\n      font:\n        Math.floor(this.size / this.textSizeRatio) +\n        'px Helvetica, Arial, sans-serif',\n      lineHeight: this.size + 'px',\n      ...this.style\n    };\n  }\n\n  /**\n   *\n   * returns image style\n   *\n   * memberOf AvatarComponent\n   */\n  private getImageStyle(): void {\n    return {\n      maxWidth: '100%',\n      borderRadius: this.round ? '50%' : this.cornerRadius + 'px',\n      border: this.borderColor ? '1px solid ' + this.borderColor : '',\n      width: this.size,\n      height: this.size,\n      ...this.style\n    };\n  }\n  /**\n   * Fetch avatar image asynchrounsly.\n   *\n   * param {Source} source represents avatar source\n   * memberof AvatarComponent\n   */\n  private fetchAndProcessAsyncAvatar(source: AsyncSource): void {\n    this.avatarService\n      .fetchAvatar(source.getAvatar())\n      .pipe(\n        takeWhile(() => this.isAlive),\n        map(response => source.processResponse(response, this.size))\n      )\n      .subscribe(\n        avatarSrc => (this.avatarSrc = avatarSrc),\n        err => {\n          console.error(\n            `ngx-avatar: error while fetching ${source.sourceType} avatar `\n          );\n        }\n      );\n  }\n\n  /**\n   * Add avatar source\n   *\n   * param sourceType avatar source type e.g facebook,twitter, etc.\n   * param sourceValue  source value e.g facebookId value, etc.\n   */\n  private addSource(sourceType: AvatarSource, sourceValue: string): void {\n    if (!this.isSourceExist(sourceType)) {\n      this.sources.push(\n        this.sourceFactory.newInstance(sourceType, sourceValue)\n      );\n    } else {\n      const index = this.sources.findIndex(\n        source => source.sourceType === sourceType\n      );\n      this.sources[index].sourceId = sourceValue;\n    }\n  }\n\n  private isSourceExist(avatarSource: AvatarSource): boolean {\n    return this.sources.map(source => source.sourceType).includes(avatarSource);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AvatarComponent } from './avatar.component';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\nimport { AvatarConfig } from './avatar-config';\nimport { AVATAR_CONFIG } from './avatar-config.token';\nimport { AvatarConfigService } from './avatar-config.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AvatarComponent],\n  providers: [SourceFactory, AvatarService, AvatarConfigService],\n  exports: [AvatarComponent]\n})\nexport class AvatarModule {\n  static forRoot(avatarConfig?: AvatarConfig): ModuleWithProviders {\n    return {\n      ngModule: AvatarModule,\n      providers: [\n        { provide: AVATAR_CONFIG, useValue: avatarConfig ? avatarConfig : {} }\n      ]\n    };\n  }\n}\n"]}